/*******************************************************************************
*
* McStas, neutron ray-tracing package
*         Copyright 1997-2002, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor
*
* %I
* Written by: Kim Lefmann
* Date: Feb 3, 1998
* Origin: Risoe
*
* Position-sensitive monitor.
*
* %D
* An (n times m) pixel PSD monitor. This component may also be used as a beam
* detector.
*
* Example: PSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1, nx=90, ny=90, filename="Output.psd")
*
* %P
* INPUT PARAMETERS:
*
* xmin: [m]             Lower x bound of detector opening 
* xmax: [m]             Upper x bound of detector opening 
* ymin: [m]             Lower y bound of detector opening 
* ymax: [m]             Upper y bound of detector opening 
* xwidth: [m]           Width of detector. Overrides xmin, xmax 
* yheight: [m]          Height of detector. Overrides ymin, ymax 
* nx: [1]               Number of pixel columns 
* ny: [1]               Number of pixel rows 
* filename: [string]    Name of file in which to store the detector image 
* restore_neutron: [1]  If set, the monitor does not influence the neutron state 
* nowritefile: [1]      If set, monitor will skip writing to disk
*
* OUTPUT PARAMETERS:
*
* PSD_N: []             Array of neutron counts
* PSD_p: []             Array of neutron weight counts
* PSD_p2: []            Array of second moments
*
* %E
*******************************************************************************/


DEFINE COMPONENT PSD_monitor_Filter
DEFINITION PARAMETERS ()
SETTING PARAMETERS (int nx=90, int ny=90,int nL=90, int filter_pixels=600, string filename=0, xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, restore_neutron=0, 
  int nowritefile=0,string TwoD_filename=0, string L_filename=0,Lmin=0, Lmax=10,aply_xy_filter=1,filter_xmin=-0.8,
  filter_xmax=0.8,filter_ymin=-0.8,filter_ymax=0.8,pinhol_filter_distance = 25, pinhol_detector_distance=25,smoothing=0.0,zoom=1.0)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
/* Neutron parameters: (x,y,z,vx,vy,vz,t,sx,sy,sz,p) */

DECLARE
%{
  DArray2d PSD_N;
  DArray2d PSD_p;
  DArray2d PSD_p2;

  DArray2d TwoD_data;

  char TwoD[50];
  double Filter_scale;

  FILE *filePointer;

%}
INITIALIZE
%{
  int i,j,n,k, count, target;
  if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ((xmin >= xmax) || (ymin >= ymax)) {
            printf("PSD_monitor: %s: Null detection area !\n"
                   "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }

    xmin = xmin/zoom;
    xmax = xmax/zoom;
    ymin = ymin/zoom;
    ymax = ymax/zoom;

  PSD_N = create_darr2d(nx, ny);
  PSD_p = create_darr2d(nx, ny);
  PSD_p2 = create_darr2d(nx, ny);

  TwoD_data=create_darr2d(filter_pixels,filter_pixels);
  
  filePointer = fopen(TwoD_filename, "r");

  for(i=0; i<filter_pixels; i++){
    for(j=0; j<filter_pixels; j++){
      fscanf(filePointer, "%s", TwoD);
      TwoD_data[j][i] = atof(TwoD);
    }
  }

  fclose(filePointer);

  Filter_scale = pinhol_filter_distance / pinhol_detector_distance;

  %}
TRACE
  %{
    int i,j,n, X_shift, Y_shift;//k;
    double X, Y;
    double Rand;

    PROP_Z0;
    if (x>xmin && x<xmax && y>ymin && y<ymax)
    {


      if (aply_xy_filter == 1){

        X = x * Filter_scale;
        Y = y * Filter_scale;

        if (smoothing > 0.0){
	Rand = randnorm();

        X_shift = floor(Rand*smoothing);

        Rand = randnorm();

        Y_shift = floor(Rand*smoothing);

        //printf("%1.1f \n",floor(Rand*smoothing));

      }

      else{X_shift = 0; Y_shift=0;}

        i = floor((X - filter_xmin*1.8)*filter_pixels/(filter_xmax*1.8 - filter_xmin*1.8)) + X_shift;
        j = floor((Y - filter_ymin*1.8)*filter_pixels/(filter_ymax*1.8 - filter_ymin*1.8)) + Y_shift;
        
        //if (X>filter_xmin && X<filter_xmax && Y>filter_ymin && Y<filter_ymax)
        if (i>-1 && i<filter_pixels && j>-1 && j<filter_pixels)
          {
            p*= TwoD_data[i][j];
          }
        else{p*=0;}
      }


      i = floor((x - xmin)*nx/(xmax - xmin));
      j = floor((y - ymin)*ny/(ymax - ymin));

      PSD_N[i][j]++;
      PSD_p[i][j] += p;
      PSD_p2[i][j] += p*p;
      SCATTER;
    }
    if (restore_neutron) {
      RESTORE_NEUTRON(INDEX_CURRENT_COMP, x, y, z, vx, vy, vz, t, sx, sy, sz, p);
    }
  %}
SAVE
  %{
    if (!nowritefile) {
      DETECTOR_OUT_2D(
          "PSD monitor",
          "X position [cm]",
          "Y position [cm]",
          xmin*100.0, xmax*100.0, ymin*100.0, ymax*100.0,
          nx, ny,
          &PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],
          filename);
    }
  %}

FINALLY %{
  destroy_darr2d(PSD_N);
  destroy_darr2d(PSD_p);
  destroy_darr2d(PSD_p2);
  destroy_darr2d(TwoD_data);
%}


MCDISPLAY
%{
  
  multiline(5, (double)xmin, (double)ymin, 0.0,
               (double)xmax, (double)ymin, 0.0,
               (double)xmax, (double)ymax, 0.0,
               (double)xmin, (double)ymax, 0.0,
               (double)xmin, (double)ymin, 0.0);
%}

END
